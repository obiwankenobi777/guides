.............................................................................
    VARI√ÅVEIS

    TIPOS ESCALARES
    Um tipo escalar representa um √∫nico valor. Rust possui quatro tipos
    escalares principais: inteiros(i(com sinal) ou u(sem sinal)), n√∫meros
    de ponto flutuante (float), booleanos(bool) e caracteres(char).

        Length  Signed Unsigned
        8-bit   i8      u8
        16-bit  i16     u16
        32-bit  i32     u32
        64-bit  i64     u64
        128-bit i128    u128
        arch    isize   usize

    Os tipos isize e usize dependem da arquitetura do computador em que seu
    programa est√° sendo executado, o que √© denotado na tabela como "arch": 64
    bits se voc√™ estiver em uma arquitetura de 64 bits e 32 bits se voc√™ estiver
    em uma arquitetura de 32 bits.

        Literais num√©ricos	Exemplo
        Decimal	            98_222
        Hex	                0xff
        Octal	            0o77
        Bin√°rio	            0b1111_0000
        Byte(u8somente)	    b'A'

    TIPOS DE PONTO FLUTUANTE
    Os tipos de pontos flutuantes em RUST s√£o f32 e f64, que t√™m 32 e 64 bits,
    respectivamente. O tipo padr√£o usado √©: f64 porque, em CPU's modernas, ele
    tem aproximadamente a mesma velociade que, f32 mas √© capaz de maior
    precis√£o. Todos os tipos de pontos flutuante s√£o assinados.

    fn main() {
        let x = 2.0; //f64
        let y: f32 = 3.0; //f32
    }

    TIPO BOOLEANO
    true e false

    fn main() {
        let t = true;
        let f: bool = false; //with explicit type annotation
    }

    TIPO CARACTERE

    fn main() {
        let c = 'z';
        let z: char = '‚Ñ§'; // with explicit type annotation
        let heart_eyed_cat = 'üòª';
    }

    TIPO TUPLA
    Um tupla √© uma maneira de agrupar uma s√©rie de valores com diversos tipos em
    um tipo composto. As tuplas t√™m cumprimento fixo: uma vez declaradas, n√£o
    podem aumentar ou diminuir tamanho.

    fn main() {
        let tup: (i32, f64, u8) = (500, 6.4, 1);
        let (x, y, z) = tup;
        println!("{} {} {}", tup.0, tup.1, tup.2);
    }

    TIPO DE ARRAY
    Ao contr√°rio de uma tupla todos os elementos de um array devem ser do mesmo
    tipo. Arrays em RUST t√™m um comprimento fixo.

    fn main() {
        let a = [1, 2, 3, 4, 5];
        println!("{} {}", a[0], a[1]);
    }

    Arrays s√£o √∫teis quando voc√™ deseja que seus dados sejam alocados na pilha,
    assim como os outros tipos que vimos at√© agora, em vez do heap ou quando
    voc√™ deseja garantir que sempre tenha um n√∫mero fixo de elementos. Um array
    n√£o √© flex√≠vel quanto o tipo vetor. Um vetor √© um tipo de cole√ß√£o semelhante
    fornecido pela bibioteca padr√£o que pode aumentar ou diminuir de tamanho.

    Voc√™ pode inicializar uma matriz para conter o mesmo valor para cada
    elemento especificando o valor inicial, seguido por um ponto e v√≠rgula e, em
    seguida, o comprimento do array entre colchetes:

    let a = [3; 5];


.............................................................................
    FUN√á√ïES

    Declara√ß√µes e express√µes

    Corpos de fun√ß√µes s√£o compostos por uma s√©rie de intru√ß√µes que terminam
    opcionalmente em uma express√£o.

        .Intru√ß√µes s√£o instru√ß√µes que executam alguma a√ß√£o e n√£o retornam um
        valor.
        .Express√µes s√£o avaliadas como um valor resultante. //express√µes n√£o
        incluem ponto e v√≠rgula: ';'.

    Instru√ß√µes n√£o retornam valores. Portanto, voc√™ n√£o pode atribuir um let
    instru√ß√£o a outra vari√°vel, como o c√≥digo a seguir tenta fazer; voc√™
    receber√° um erro:

        fn main() {
            let x = (let y = 6);
        }
        
    Ao executar o programa acima, o compilador enviar√° um erro. Pois let y = 6 √©
    uma instru√ß√£o.

    fn main() {
        let y = {
            let x = 3;
            x + 1
        };
        println!("The value of y is: {y}"); //4
    }

    Esta express√£o: 
    {
        let x = 3;
        x + 1
    }
    √© um bloco, neste caso, √© avaliado como 4. Esse valor √© vinculado a y como
    parte da instru√ß√£o let. Oberseve que a linha x + 1 n√£o tem ponto e v√≠rgula
    no final, o que √© diferente da maioria das linhas que voc√™ viu at√© agora.
    Express√µes n√£o incluem ponto v√≠rgula final. Se voc√™ adicionar um ponto e
    v√≠rgula ao final de uma express√£o, voc√™ a transforma em uma instru√ß√£o, e ela
    n√£o retornar√° um valor. Tenha isso em mente ao explorar os valores de
    retorno de fun√ß√µes e express√µes a seguir.

    FUN√á√ïES COM VALORES DE RETORNO
    Fun√ß√µes podem retornar valores para o c√≥digo que as chama. N√£o nomeamos os
    valores de retorno, mas devemos declarar seu tipo ap√≥s uma seta: '->'. Em
    RUST, o valor de retorno da fun√ß√£o √© sin√¥nimo do valor da express√£o final no
    bloco do corpo de uma fun√ß√£o. Voc√™ pode retornar no in√≠cio de uma fun√ß√£o
    usando a keyboard: return e especificando um valor, mas a maioria das
    fun√ß√µes retorna a √∫ltima express√£o implicitamente. 

    fn five() -> i32 {
        //return 5; 
        //tanto return 5 como 5 d√° no mesmo resultado
        5
    }
    fn main() {
        let x = five():
        println!("The value of x is: {x}");
    }

.............................................................................
